'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'

const translations = {
  en: {
    title: 'ЁЯМ╛ KISAN SAFE ЁЯЪЬ',
    home: 'Home',
    about: 'About',
    helplines: 'Helplines',
    news: 'News',
    farmTitle: 'ЁЯМ▒ Tell us about your farm ЁЯМ╛',
    locationLabel: 'ЁЯПб Where is your farm located?',
    locationHint: 'We automatically detected your location, or enter manually',
    locationPlaceholder: 'Search worldwide locations (e.g., New York, Mumbai, London, Tokyo)',
    refreshLocation: 'ЁЯФД Refresh My Location',
    cropLabel: 'ЁЯМ╛ What crop are you growing?',
    cropPlaceholder: 'Search for your crop (e.g., Rice, Wheat, Tomato)',
    farmSizeLabel: 'ЁЯЪЬ Farm Size (acres)',
    farmSizePlaceholder: 'Enter farm size',
    submitButton: 'ЁЯЪА Start Farming Dashboard',
    gettingLocation: 'ЁЯУН Getting your location...',
    selected: 'тЬЕ Selected:',
    noLocationsFound: 'No locations found. You can still type your custom location.',
    noCropsFound: 'No crops found',
    dashboard: 'Dashboard',
    yieldPrediction: 'Yield Prediction',
    weatherAlerts: 'Weather Alerts',
    marketPrices: 'Market Prices',
    recommendations: 'Recommendations',
    aboutTitle: 'About KisanSafe',
    aboutDescription: 'AI-powered smart farming solution for better crop yields',
    contactTitle: 'Emergency Helplines',
    farmerHelpline: 'Farmer Helpline',
    weatherHelpline: 'Weather Helpline',
    newsTitle: 'Agricultural News',
    latestNews: 'Latest News'
  },
  hi: {
    title: 'ЁЯМ╛ рдХрд┐рд╕рд╛рди рд╕реЗрдл ЁЯЪЬ',
    home: 'рд╣реЛрдо',
    about: 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ',
    helplines: 'рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
    news: 'рд╕рдорд╛рдЪрд╛рд░',
    farmTitle: 'ЁЯМ▒ рдЕрдкрдиреЗ рдЦреЗрдд рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ ЁЯМ╛',
    locationLabel: 'ЁЯПб рдЖрдкрдХрд╛ рдЦреЗрдд рдХрд╣рд╛рдБ рд╕реНрдерд┐рдд рд╣реИ?',
    locationHint: 'рд╣рдордиреЗ рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдкрддрд╛ рд▓рдЧрд╛рдпрд╛ рд╣реИ, рдпрд╛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рджрд░реНрдЬ рдХрд░реЗрдВ',
    locationPlaceholder: 'рд╡рд┐рд╢реНрд╡рд╡реНрдпрд╛рдкреА рд╕реНрдерд╛рди рдЦреЛрдЬреЗрдВ (рдЬреИрд╕реЗ, рдирдИ рджрд┐рд▓реНрд▓реА, рдореБрдВрдмрдИ, рд▓рдВрджрди, рдЯреЛрдХреНрдпреЛ)',
    refreshLocation: 'ЁЯФД рдореЗрд░рд╛ рд╕реНрдерд╛рди рд░реАрдлреНрд░реЗрд╢ рдХрд░реЗрдВ',
    cropLabel: 'ЁЯМ╛ рдЖрдк рдХреМрди рд╕реА рдлрд╕рд▓ рдЙрдЧрд╛ рд░рд╣реЗ рд╣реИрдВ?',
    cropPlaceholder: 'рдЕрдкрдиреА рдлрд╕рд▓ рдЦреЛрдЬреЗрдВ (рдЬреИрд╕реЗ, рдЪрд╛рд╡рд▓, рдЧреЗрд╣реВрдБ, рдЯрдорд╛рдЯрд░)',
    farmSizeLabel: 'ЁЯЪЬ рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝)',
    farmSizePlaceholder: 'рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ рджрд░реНрдЬ рдХрд░реЗрдВ',
    submitButton: 'ЁЯЪА рдлрд╛рд░реНрдорд┐рдВрдЧ рдбреИрд╢рдмреЛрд░реНрдб рд╢реБрд░реВ рдХрд░реЗрдВ',
    gettingLocation: 'ЁЯУН рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
    selected: 'тЬЕ рдЪрдпрдирд┐рдд:',
    noLocationsFound: 'рдХреЛрдИ рд╕реНрдерд╛рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдЖрдк рдЕрднреА рднреА рдЕрдкрдирд╛ рдХрд╕реНрдЯрдо рд╕реНрдерд╛рди рдЯрд╛рдЗрдк рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
    noCropsFound: 'рдХреЛрдИ рдлрд╕рд▓ рдирд╣реАрдВ рдорд┐рд▓реА',
    dashboard: 'рдбреИрд╢рдмреЛрд░реНрдб',
    yieldPrediction: 'рдлрд╕рд▓ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
    weatherAlerts: 'рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА',
    marketPrices: 'рдмрд╛рдЬрд╛рд░ рднрд╛рд╡',
    recommendations: 'рд╕реБрдЭрд╛рд╡',
    aboutTitle: 'рдХрд┐рд╕рд╛рдирд╕реЗрдл рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ',
    aboutDescription: 'рдмреЗрд╣рддрд░ рдлрд╕рд▓ рдЙрддреНрдкрд╛рджрди рдХреЗ рд▓рд┐рдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рд╕рдорд╛рдзрд╛рди',
    contactTitle: 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
    farmerHelpline: 'рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
    weatherHelpline: 'рдореМрд╕рдо рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди',
    newsTitle: 'рдХреГрд╖рд┐ рд╕рдорд╛рдЪрд╛рд░',
    latestNews: 'рддрд╛рдЬрд╛ рдЦрдмрд░реЗрдВ'
  },
  te: {
    title: 'ЁЯМ╛ р░Хр░┐р░╕р░╛р░ир▒Н р░╕р▒Зр░лр▒Н ЁЯЪЬ',
    home: 'р░╣р▒Лр░ор▒Н',
    about: 'р░ор░╛ р░Чр▒Бр░░р░┐р░Вр░Ър░┐',
    helplines: 'р░╣р▒Жр░▓р▒Нр░кр▒Нр░▓р▒Ир░ир▒Нр░╕р▒Н',
    news: 'р░╡р░╛р░░р▒Нр░др░▓р▒Б',
    farmTitle: 'ЁЯМ▒ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐ ЁЯМ╛',
    locationLabel: 'ЁЯПб р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░нр▒Вр░ор░┐ р░Ор░Хр▒Нр░Хр░б р░Йр░Вр░жр░┐?',
    locationHint: 'р░ор▒Зр░ор▒Б р░ор▒А р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░╕р▒Нр░╡р░пр░Вр░Ър░╛р░▓р░Хр░Вр░Чр░╛ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░╛р░ор▒Б, р░▓р▒Зр░жр░╛ р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Нр░Чр░╛ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
    locationPlaceholder: 'р░кр▒Нр░░р░кр░Вр░Ър░╡р▒Нр░пр░╛р░кр▒Нр░д р░╕р▒Нр░ер░╛р░ир░╛р░▓р░ир▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐ (р░Йр░жр░╛., р░ир▒Нр░пр▒Вр░пр░╛р░░р▒Нр░Хр▒Н, р░ор▒Бр░Вр░мр▒И, р░▓р░Вр░бр░ир▒Н, р░Яр▒Лр░Хр▒Нр░пр▒Л)',
    refreshLocation: 'ЁЯФД р░ир░╛ р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░░р░┐р░лр▒Нр░░р▒Жр░╖р▒Н р░Ър▒Зр░пр░Вр░бр░┐',
    cropLabel: 'ЁЯМ╛ р░ор▒Ар░░р▒Б р░П р░кр░Вр░Я р░кр░Вр░бр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б?',
    cropPlaceholder: 'р░ор▒А р░кр░Вр░Яр░ир▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐ (р░Йр░жр░╛., р░╡р░░р░┐, р░Чр▒Лр░зр▒Бр░ор░▓р▒Б, р░Яр░ор░╛р░Яр▒Л)',
    farmSizeLabel: 'ЁЯЪЬ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░нр▒Вр░ор░┐ р░кр░░р░┐р░ор░╛р░гр░В (р░Ор░Хр░░р░╛р░▓р▒Б)',
    farmSizePlaceholder: 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░нр▒Вр░ор░┐ р░кр░░р░┐р░ор░╛р░гр░В р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
    submitButton: 'ЁЯЪА р░╡р▒Нр░пр░╡р░╕р░╛р░п р░бр░╛р░╖р▒Нр░мр▒Лр░░р▒Нр░бр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐',
    gettingLocation: 'ЁЯУН р░ор▒А р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░кр▒Кр░Вр░жр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б...',
    selected: 'тЬЕ р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░ир░жр░┐:',
    noLocationsFound: 'р░╕р▒Нр░ер░╛р░ир░╛р░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б. р░ор▒Ар░░р▒Б р░Зр░кр▒Нр░кр░Яр░┐р░Хр▒А р░ор▒А р░Хр░╕р▒Нр░Яр░ор▒Н р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б.',
    noCropsFound: 'р░кр░Вр░Яр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б',
    dashboard: 'р░бр░╛р░╖р▒Нр░мр▒Лр░░р▒Нр░бр▒Н',
    yieldPrediction: 'р░кр░Вр░Я р░Ер░Вр░Ър░ир░╛',
    weatherAlerts: 'р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б',
    marketPrices: 'р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б',
    recommendations: 'р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б',
    aboutTitle: 'р░Хр░┐р░╕р░╛р░ир▒Нр░╕р▒Зр░лр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐',
    aboutDescription: 'р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░кр░Вр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Хр▒Лр░╕р░В AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Хр▒Вр░бр░┐р░и р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░░р░┐р░╖р▒Нр░Хр░╛р░░р░В',
    contactTitle: 'р░Ер░др▒Нр░пр░╡р░╕р░░ р░╣р▒Жр░▓р▒Нр░кр▒Нр░▓р▒Ир░ир▒Нр░▓р▒Б',
    farmerHelpline: 'р░░р▒Ир░др▒Б р░╣р▒Жр░▓р▒Нр░кр▒Нр░▓р▒Ир░ир▒Н',
    weatherHelpline: 'р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░▓р▒Нр░кр▒Нр░▓р▒Ир░ир▒Н',
    newsTitle: 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░╛р░░р▒Нр░др░▓р▒Б',
    latestNews: 'р░др░╛р░Ьр░╛ р░╡р░╛р░░р▒Нр░др░▓р▒Б'
  },
  ta: {
    title: 'ЁЯМ╛ роХро┐роЪро╛ройрпН роЪрпЗроГрокрпН ЁЯЪЬ',
    home: 'роорпБроХрокрпНрокрпБ',
    about: 'роОроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐',
    helplines: 'роЙродро╡ро┐ роОрогрпНроХро│рпН',
    news: 'роЪрпЖропрпНродро┐роХро│рпН',
    farmTitle: 'ЁЯМ▒ роЙроЩрпНроХро│рпН рокрогрпНрогрпИропрпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН ЁЯМ╛',
    locationLabel: 'ЁЯПб роЙроЩрпНроХро│рпН рокрогрпНрогрпИ роОроЩрпНроХрпЗ роЕроорпИроирпНродрпБро│рпНро│родрпБ?',
    locationHint: 'роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИ родро╛ройро╛роХро╡рпЗ роХрогрпНроЯро▒ро┐роирпНродрпБро│рпНро│рпЛроорпН, роЕро▓рпНро▓родрпБ роХрпИроорпБро▒рпИропро╛роХ роЙро│рпНро│ро┐роЯро╡рпБроорпН',
    locationPlaceholder: 'роЙро▓роХро│ро╛ро╡ро┐роп роЗроЯроЩрпНроХро│рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН (роО.роХро╛., роиро┐ропрпВропро╛ро░рпНроХрпН, роорпБроорпНрокрпИ, ро▓рогрпНроЯройрпН, роЯрпЛроХрпНроХро┐ропрпЛ)',
    refreshLocation: 'ЁЯФД роОройродрпБ роЗро░рпБрокрпНрокро┐роЯродрпНродрпИ рокрпБродрпБрокрпНрокро┐роХрпНроХро╡рпБроорпН',
    cropLabel: 'ЁЯМ╛ роирпАроЩрпНроХро│рпН роОройрпНрой рокропро┐ро░рпН ро╡ро│ро░рпНроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?',
    cropPlaceholder: 'роЙроЩрпНроХро│рпН рокропро┐ро░рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН (роО.роХро╛., роЕро░ро┐роЪро┐, роХрпЛродрпБроорпИ, родроХрпНроХро╛ро│ро┐)',
    farmSizeLabel: 'ЁЯЪЬ рокрогрпНрогрпИ роЕро│ро╡рпБ (роПроХрпНроХро░рпН)',
    farmSizePlaceholder: 'рокрогрпНрогрпИ роЕро│ро╡рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН',
    submitButton: 'ЁЯЪА ро╡ро┐ро╡роЪро╛роп роЯро╛ро╖рпНрокрпЛро░рпНроЯрпИродрпН родрпКроЯроЩрпНроХро╡рпБроорпН',
    gettingLocation: 'ЁЯУН роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИрокрпН рокрпЖро▒рпБроХро┐ро▒рпЛроорпН...',
    selected: 'тЬЕ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯродрпБ:',
    noLocationsFound: 'роЗроЯроЩрпНроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роирпАроЩрпНроХро│рпН роЗройрпНройрпБроорпН роЙроЩрпНроХро│рпН родройро┐рокрпНрокропройрпН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро▓ро╛роорпН.',
    noCropsFound: 'рокропро┐ро░рпНроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ',
    dashboard: 'роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ',
    yieldPrediction: 'рокропро┐ро░рпН роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
    weatherAlerts: 'ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН',
    marketPrices: 'роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН',
    recommendations: 'рокро░ро┐роирпНродрпБро░рпИроХро│рпН',
    aboutTitle: 'роХро┐роЪро╛ройрпНроЪрпЗроГрокрпН рокро▒рпНро▒ро┐',
    aboutDescription: 'роЪро┐ро▒роирпНрод рокропро┐ро░рпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпБроХрпНроХро╛рой AI-роЗропроЩрпНроХрпБроорпН ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп родрпАро░рпНро╡рпБ',
    contactTitle: 'роЕро╡роЪро░ роЙродро╡ро┐ роОрогрпНроХро│рпН',
    farmerHelpline: 'ро╡ро┐ро╡роЪро╛ропро┐ роЙродро╡ро┐ роОрогрпН',
    weatherHelpline: 'ро╡ро╛ройро┐ро▓рпИ роЙродро╡ро┐ роОрогрпН',
    newsTitle: 'ро╡ро┐ро╡роЪро╛роп роЪрпЖропрпНродро┐роХро│рпН',
    latestNews: 'роЪроорпАрокродрпНродро┐роп роЪрпЖропрпНродро┐роХро│рпН'
  },
  bn: {
    title: 'ЁЯМ╛ ржХрж┐рж╕рж╛ржи рж╕рзЗржл ЁЯЪЬ',
    home: 'рж╣рзЛржо',
    about: 'ржЖржорж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ',
    helplines: 'рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи',
    news: 'рж╕ржВржмрж╛ржж',
    farmTitle: 'ЁЯМ▒ ржЖржкржирж╛рж░ ржЦрж╛ржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи ЁЯМ╛',
    locationLabel: 'ЁЯПб ржЖржкржирж╛рж░ ржЦрж╛ржорж╛рж░ ржХрзЛржерж╛ржпрж╝ ржЕржмрж╕рзНржерж┐ржд?',
    locationHint: 'ржЖржорж░рж╛ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи рж╕ржирж╛ржХрзНржд ржХрж░рзЗржЫрж┐, ржмрж╛ ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ ржкрзНрж░ржмрзЗрж╢ ржХрж░рж╛ржи',
    locationPlaceholder: 'ржмрж┐рж╢рзНржмржмрзНржпрж╛ржкрзА ржЕржмрж╕рзНржерж╛ржи ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи (ржпрзЗржоржи, ржирж┐ржЙржЗржпрж╝рж░рзНржХ, ржорзБржорзНржмрж╛ржЗ, рж▓ржирзНржбржи, ржЯрзЛржХрж┐ржУ)',
    refreshLocation: 'ЁЯФД ржЖржорж╛рж░ ржЕржмрж╕рзНржерж╛ржи рж░рж┐ржлрзНрж░рзЗрж╢ ржХрж░рзБржи',
    cropLabel: 'ЁЯМ╛ ржЖржкржирж┐ ржХрзА ржлрж╕рж▓ ржЪрж╛рж╖ ржХрж░ржЫрзЗржи?',
    cropPlaceholder: 'ржЖржкржирж╛рж░ ржлрж╕рж▓ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи (ржпрзЗржоржи, ржЪрж╛рж▓, ржЧржо, ржЯржорзЗржЯрзЛ)',
    farmSizeLabel: 'ЁЯЪЬ ржЦрж╛ржорж╛рж░рзЗрж░ ржЖржХрж╛рж░ (ржПржХрж░)',
    farmSizePlaceholder: 'ржЦрж╛ржорж╛рж░рзЗрж░ ржЖржХрж╛рж░ ржкрзНрж░ржмрзЗрж╢ ржХрж░рж╛ржи',
    submitButton: 'ЁЯЪА ржХрзГрж╖рж┐ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб рж╢рзБрж░рзБ ржХрж░рзБржи',
    gettingLocation: 'ЁЯУН ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржкрж╛ржЪрзНржЫрж┐...',
    selected: 'тЬЕ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд:',
    noLocationsFound: 'ржХрзЛржирзЛ ржЕржмрж╕рзНржерж╛ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЖржкржирж┐ ржПржЦржиржУ ржЖржкржирж╛рж░ ржХрж╛рж╕рзНржЯржо ржЕржмрж╕рзНржерж╛ржи ржЯрж╛ржЗржк ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред',
    noCropsFound: 'ржХрзЛржирзЛ ржлрж╕рж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐',
    dashboard: 'ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
    yieldPrediction: 'ржлрж╕рж▓ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
    weatherAlerts: 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛',
    marketPrices: 'ржмрж╛ржЬрж╛рж░ ржжрж╛ржо',
    recommendations: 'рж╕рзБржкрж╛рж░рж┐рж╢',
    aboutTitle: 'ржХрж┐рж╕рж╛ржирж╕рзЗржл рж╕ржорзНржкрж░рзНржХрзЗ',
    aboutDescription: 'ржЙржирзНржиржд ржлрж╕рж▓ ржЙрзОржкрж╛ржжржирзЗрж░ ржЬржирзНржп AI-ржЪрж╛рж▓рж┐ржд рж╕рзНржорж╛рж░рзНржЯ ржХрзГрж╖рж┐ рж╕ржорж╛ржзрж╛ржи',
    contactTitle: 'ржЬрж░рзБрж░рж┐ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи',
    farmerHelpline: 'ржХрзГрж╖ржХ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи',
    weatherHelpline: 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи',
    newsTitle: 'ржХрзГрж╖рж┐ рж╕ржВржмрж╛ржж',
    latestNews: 'рж╕рж░рзНржмрж╢рзЗрж╖ рж╕ржВржмрж╛ржж'
  },
  gu: {
    title: 'ЁЯМ╛ ркХрк┐рк╕рк╛рки рк╕рлЗркл ЁЯЪЬ',
    home: 'рк╣рлЛрко',
    about: 'ркЕркорк╛рк░рк╛ рк╡рк┐рк╢рлЗ',
    helplines: 'рк╣рлЗрк▓рлНрккрк▓рк╛ркЗрки',
    news: 'рк╕ркорк╛ркЪрк╛рк░',
    farmTitle: 'ЁЯМ▒ ркдркорк╛рк░рк╛ ркЦрлЗркдрк░ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ ЁЯМ╛',
    locationLabel: 'ЁЯПб ркдркорк╛рк░рлБркВ ркЦрлЗркдрк░ ркХрлНркпрк╛ркВ ркЖрк╡рлЗрк▓рлБркВ ркЫрлЗ?',
    locationHint: 'ркЕркорлЗ ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки ркЖрккрлЛркЖркк рк╢рлЛркзрлА ркХрк╛ркврлНркпрлБркВ ркЫрлЗ, ркЕркерк╡рк╛ ркорлЗркирлНркпрлБркЕрк▓рлА ркжрк╛ркЦрк▓ ркХрк░рлЛ',
    locationPlaceholder: 'рк╡рк┐рк╢рлНрк╡рк╡рлНркпрк╛рккрлА рк╕рлНркерк╛ркирлЛ рк╢рлЛркзрлЛ (ркЬрлЗрко ркХрлЗ, ркирлНркпрлВркпрлЛрк░рлНркХ, ркорлБркВркмркИ, рк▓ркВркбрки, ркЯрлЛркХрлНркпрлЛ)',
    refreshLocation: 'ЁЯФД ркорк╛рк░рлБркВ рк╕рлНркерк╛рки рк░рк┐рклрлНрк░рлЗрк╢ ркХрк░рлЛ',
    cropLabel: 'ЁЯМ╛ ркдркорлЗ ркХркпрлЛ рккрк╛ркХ ркЙркЧрк╛ркбрлЛ ркЫрлЛ?',
    cropPlaceholder: 'ркдркорк╛рк░рлЛ рккрк╛ркХ рк╢рлЛркзрлЛ (ркЬрлЗрко ркХрлЗ, ркЪрлЛркЦрк╛, ркШркЙркВ, ркЯрк╛ркорлЗркЯрк╛ркВ)',
    farmSizeLabel: 'ЁЯЪЬ ркЦрлЗркдрк░ркирлБркВ ркХркж (ркПркХрк░)',
    farmSizePlaceholder: 'ркЦрлЗркдрк░ркирлБркВ ркХркж ркжрк╛ркЦрк▓ ркХрк░рлЛ',
    submitButton: 'ЁЯЪА ркЦрлЗркдрлА ркбрлЗрк╢ркмрлЛрк░рлНркб рк╢рк░рлВ ркХрк░рлЛ',
    gettingLocation: 'ЁЯУН ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки ркорлЗрк│рк╡рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...',
    selected: 'тЬЕ рккрк╕ркВркж ркХрк░рлЗрк▓:',
    noLocationsFound: 'ркХрлЛркИ рк╕рлНркерк╛рки ркорк│рлНркпрлБркВ ркиркерлА. ркдркорлЗ рк╣ркЬрлБ рккркг ркдркорк╛рк░рлБркВ ркХрк╕рлНркЯрко рк╕рлНркерк╛рки ркЯрк╛ркИркк ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ.',
    noCropsFound: 'ркХрлЛркИ рккрк╛ркХ ркорк│рлНркпрлЛ ркиркерлА',
    dashboard: 'ркбрлЗрк╢ркмрлЛрк░рлНркб',
    yieldPrediction: 'рккрк╛ркХ ркЖркЧрк╛рк╣рлА',
    weatherAlerts: 'рк╣рк╡рк╛ркорк╛рки ркЪрлЗркдрк╡ркгрлА',
    marketPrices: 'ркмркЬрк╛рк░ ркнрк╛рк╡',
    recommendations: 'ркнрк▓рк╛ркоркгрлЛ',
    aboutTitle: 'ркХрк┐рк╕рк╛ркирк╕рлЗркл рк╡рк┐рк╢рлЗ',
    aboutDescription: 'рк╡ркзрлБ рк╕рк╛рк░рк╛ рккрк╛ркХ ркЙркдрлНрккрк╛ркжрки ркорк╛ркЯрлЗ AI-рк╕ркВркЪрк╛рк▓рк┐ркд рк╕рлНркорк╛рк░рлНркЯ ркЦрлЗркдрлА рк╕ркорк╛ркзрк╛рки',
    contactTitle: 'ркХркЯрлЛркХркЯрлА рк╣рлЗрк▓рлНрккрк▓рк╛ркЗрки',
    farmerHelpline: 'ркЦрлЗркбрлВркд рк╣рлЗрк▓рлНрккрк▓рк╛ркЗрки',
    weatherHelpline: 'рк╣рк╡рк╛ркорк╛рки рк╣рлЗрк▓рлНрккрк▓рк╛ркЗрки',
    newsTitle: 'ркХрлГрк╖рк┐ рк╕ркорк╛ркЪрк╛рк░',
    latestNews: 'ркдрк╛ркЬрк╛ рк╕ркорк╛ркЪрк╛рк░'
  }
}

type Language = keyof typeof translations
type TranslationKey = keyof typeof translations.en

interface LanguageContextType {
  language: Language
  setLanguage: (lang: Language) => void
  t: (key: TranslationKey) => string
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>('en')

  // Load saved language on mount
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('kisanSafeLanguage') as Language
      if (saved && translations[saved]) {
        setLanguage(saved)
      }
    }
  }, [])

  // Save language when changed
  const handleSetLanguage = (lang: Language) => {
    setLanguage(lang)
    if (typeof window !== 'undefined') {
      localStorage.setItem('kisanSafeLanguage', lang)
    }
  }

  const t = (key: TranslationKey): string => {
    return translations[language][key] || translations.en[key]
  }

  return (
    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  )
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider')
  }
  return context
}