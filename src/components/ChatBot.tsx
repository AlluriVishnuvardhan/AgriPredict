'use client'

import { useState, useRef, useEffect } from 'react'
import { useLanguage } from '@/contexts/LanguageContext'
import { getSmartResponse } from '@/lib/farmingKnowledge'

interface Message {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { t, language } = useLanguage()

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage = getWelcomeMessage()
      setMessages([{
        id: Date.now().toString(),
        text: welcomeMessage,
        isBot: true,
        timestamp: new Date()
      }])
    }
  }, [isOpen, language])

  const getWelcomeMessage = () => {
    const welcomeMessages = {
      en: "ЁЯМ╛ Hello! I'm KisanSafe AI Assistant. I can help you with:\n\nтАв Crop yield predictions\nтАв Weather alerts & farming tips\nтАв Market prices & best selling times\nтАв Disease identification & treatment\nтАв Government schemes & subsidies\nтАв Planting schedules & soil management\n\nWhat would you like to know?",
      hi: "ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдХрд┐рд╕рд╛рдирд╕реЗрдл AI рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nтАв рдлрд╕рд▓ рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди\nтАв рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА рдФрд░ рдЦреЗрддреА рдХреЗ рдЯрд┐рдкреНрд╕\nтАв рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдмреЗрдЪрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп\nтАв рдмреАрдорд╛рд░реА рдкрд╣рдЪрд╛рди рдФрд░ рдЗрд▓рд╛рдЬ\nтАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рд╕рдмреНрд╕рд┐рдбреА\nтАв рдмреБрдЖрдИ рдХрд╛ рд╕рдордп рдФрд░ рдорд┐рдЯреНрдЯреА рдкреНрд░рдмрдВрдзрди\n\nрдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      te: "ЁЯМ╛ р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░Хр░┐р░╕р░╛р░ир▒НтАМр░╕р▒Зр░лр▒Н AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б:\n\nтАв р░кр░Вр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛р░▓р▒Б\nтАв р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б & р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б\nтАв р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б & р░Ер░ор▒Нр░ор░Хр░кр▒Б р░╕р░ор░пр░В\nтАв р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б & р░Ър░┐р░Хр░┐р░др▒Нр░╕\nтАв р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б & р░╕р░мр▒Нр░╕р░┐р░бр▒Ар░▓р▒Б\nтАв р░╡р░┐р░др▒Нр░др░и р░╕р░ор░пр░В & р░ир▒Зр░▓ р░ир░┐р░░р▒Нр░╡р░╣р░г\n\nр░ор▒Ар░░р▒Б р░Пр░ор░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
      ta: "ЁЯМ╛ ро╡рогроХрпНроХроорпН! роиро╛ройрпН роХро┐роЪро╛ройрпНроЪрпЗроГрокрпН AI роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:\n\nтАв рокропро┐ро░рпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпН роХрогро┐рокрпНрокрпБроХро│рпН\nтАв ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН & ро╡ро┐ро╡роЪро╛роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпН\nтАв роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН & ро╡ро┐ро▒рпНрокройрпИ роирпЗро░роорпН\nтАв роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН & роЪро┐роХро┐роЪрпНроЪрпИ\nтАв роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН & рооро╛ройро┐ропроЩрпНроХро│рпН\nтАв ро╡ро┐родрпИрокрпНрокрпБ роирпЗро░роорпН & роорогрпН роорпЗро▓ро╛рогрпНроорпИ\n\nроирпАроЩрпНроХро│рпН роОройрпНрой родрпЖро░ро┐роирпНродрпБ роХрпКро│рпНро│ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
      bn: "ЁЯМ╛ ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржХрж┐рж╕рж╛ржирж╕рзЗржл AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nтАв ржлрж╕рж▓ ржЙрзОржкрж╛ржжржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕\nтАв ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛ ржУ ржХрзГрж╖рж┐ ржЯрж┐ржкрж╕\nтАв ржмрж╛ржЬрж╛рж░ ржжрж╛ржо ржУ ржмрж┐ржХрзНрж░ржпрж╝рзЗрж░ рж╕ржоржпрж╝\nтАв рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржУ ржЪрж┐ржХрж┐рзОрж╕рж╛\nтАв рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк ржУ ржнрж░рзНрждрзБржХрж┐\nтАв ржмржкржирзЗрж░ рж╕ржоржпрж╝ ржУ ржорж╛ржЯрж┐ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛\n\nржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
      gu: "ЁЯМ╛ ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркХрк┐рк╕рк╛ркирк╕рлЗркл AI рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ ркдркорк╛рк░рлА ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ:\n\nтАв рккрк╛ркХ ркЙркдрлНрккрк╛ркжрки ркЕркирлБркорк╛рки\nтАв рк╣рк╡рк╛ркорк╛рки ркЪрлЗркдрк╡ркгрлА ркЕркирлЗ ркЦрлЗркдрлАркирлА ркЯрк┐рккрлНрк╕\nтАв ркмркЬрк╛рк░ ркнрк╛рк╡ ркЕркирлЗ рк╡рлЗркЪрк╛ркгркирлЛ рк╕ркоркп\nтАв рк░рлЛркЧ ркУрк│ркЦ ркЕркирлЗ рк╕рк╛рк░рк╡рк╛рк░\nтАв рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркЕркирлЗ рк╕ркмрк╕рк┐ркбрлА\nтАв рк╡рк╛рк╡рлЗркдрк░ркирлЛ рк╕ркоркп ркЕркирлЗ ркорк╛ркЯрлА рк╡рлНркпрк╡рк╕рлНркерк╛рккрки\n\nркдркорлЗ рк╢рлБркВ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
    }
    return welcomeMessages[language] || welcomeMessages.en
  }

  const generateBotResponse = async (userMessage: string): Promise<string> => {
    // Try smart response from knowledge base first
    const smartResponse = getSmartResponse(userMessage, language)
    if (smartResponse) {
      return smartResponse
    }

    // Fallback responses
    const fallbackResponses = {
      en: {
        greeting: "Hello! I'm KisanSafe AI Assistant. I can help with crops, weather, prices, government schemes, and farming tips. What would you like to know?",
        help: "I can assist you with:\n\nЁЯМ╛ Crop cultivation (Rice, Wheat, Cotton, etc.)\nЁЯМжя╕П Weather updates & alerts\nЁЯТ░ Market prices & trends\nЁЯПЫя╕П Government schemes & subsidies\nЁЯжа Disease & pest management\nЁЯМ▒ Soil health & fertilizers\nЁЯТз Irrigation guidance\n\nJust ask your question!",
        price: "ЁЯТ░ Current Market Prices:\n\nтАв Rice: тВ╣2,100-2,300/quintal\nтАв Wheat: тВ╣2,200-2,400/quintal\nтАв Cotton: тВ╣6,000-7,000/quintal\nтАв Sugarcane: тВ╣350-380/quintal\nтАв Onion: тВ╣2,500-3,000/quintal\nтАв Potato: тВ╣1,800-2,200/quintal\nтАв Soybean: тВ╣4,200-4,500/quintal\n\nPrices vary by location and quality.",
        default: "I'm here to help with your farming questions! You can ask me about:\n\nЁЯМ╛ Specific crops (rice, wheat, cotton, etc.)\nЁЯМжя╕П Weather and farming alerts\nЁЯТ░ Market prices\nЁЯПЫя╕П Government schemes\nЁЯжа Plant diseases\nЁЯМ▒ Soil and fertilizers\n\nWhat would you like to know?"
      },
      hi: {
        greeting: "рдирдорд╕реНрддреЗ! рдореИрдВ рдХрд┐рд╕рд╛рдирд╕реЗрдл AI рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдлрд╕рд▓, рдореМрд╕рдо, рднрд╛рд╡, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдФрд░ рдЦреЗрддреА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        help: "рдореИрдВ рдЖрдкрдХреА рдЗрди рдЪреАрдЬреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nЁЯМ╛ рдлрд╕рд▓ рдХреА рдЦреЗрддреА (рдзрд╛рди, рдЧреЗрд╣реВрдВ, рдХрдкрд╛рд╕ рдЖрджрд┐)\nЁЯМжя╕П рдореМрд╕рдо рдЕрдкрдбреЗрдЯ рдФрд░ рдЪреЗрддрд╛рд╡рдиреА\nЁЯТ░ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рд░реБрдЭрд╛рди\nЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рд╕рдмреНрд╕рд┐рдбреА\nЁЯжа рдмреАрдорд╛рд░реА рдФрд░ рдХреАрдЯ рдкреНрд░рдмрдВрдзрди\nЁЯМ▒ рдорд┐рдЯреНрдЯреА рдХреА рд╕реЗрд╣рдд рдФрд░ рдЦрд╛рдж\nЁЯТз рд╕рд┐рдВрдЪрд╛рдИ рдорд╛рд░реНрдЧрджрд░реНрд╢рди\n\nрдмрд╕ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ!",
        price: "ЁЯТ░ рдЖрдЬ рдХреЗ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡:\n\nтАв рдзрд╛рди: тВ╣2,100-2,300/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рдЧреЗрд╣реВрдВ: тВ╣2,200-2,400/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рдХрдкрд╛рд╕: тВ╣6,000-7,000/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рдЧрдиреНрдирд╛: тВ╣350-380/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рдкреНрдпрд╛рдЬ: тВ╣2,500-3,000/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рдЖрд▓реВ: тВ╣1,800-2,200/рдХреНрд╡рд┐рдВрдЯрд▓\nтАв рд╕реЛрдпрд╛рдмреАрди: тВ╣4,200-4,500/рдХреНрд╡рд┐рдВрдЯрд▓\n\nрднрд╛рд╡ рд╕реНрдерд╛рди рдФрд░ рдЧреБрдгрд╡рддреНрддрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЕрд▓рдЧ рд╣реЛрддреЗ рд╣реИрдВред",
        default: "рдореИрдВ рдЖрдкрдХреЗ рдЦреЗрддреА рдХреЗ рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВ! рдЖрдк рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:\n\nЁЯМ╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдлрд╕рд▓реЗрдВ (рдзрд╛рди, рдЧреЗрд╣реВрдВ, рдХрдкрд╛рд╕ рдЖрджрд┐)\nЁЯМжя╕П рдореМрд╕рдо рдФрд░ рдЦреЗрддреА рдХреА рдЪреЗрддрд╛рд╡рдиреА\nЁЯТ░ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡\nЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ\nЁЯжа рдкреМрдзреЛрдВ рдХреА рдмреАрдорд╛рд░рд┐рдпрд╛рдВ\nЁЯМ▒ рдорд┐рдЯреНрдЯреА рдФрд░ рдЦрд╛рдж\n\nрдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
      }
    }

    const lowerMessage = userMessage.toLowerCase()
    const langResponses = fallbackResponses[language as keyof typeof fallbackResponses] || fallbackResponses.en

    // Pattern matching for common queries
    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('рдирдорд╕реНрддреЗ') || lowerMessage.includes('рд╣реИрд▓реЛ')) {
      return langResponses.greeting
    }
    if (lowerMessage.includes('help') || lowerMessage.includes('рдорджрдж') || lowerMessage.includes('рд╕рд╣рд╛рдпрддрд╛')) {
      return langResponses.help
    }
    if (lowerMessage.includes('price') || lowerMessage.includes('рднрд╛рд╡') || lowerMessage.includes('рджрд╛рдо') || lowerMessage.includes('rate')) {
      return langResponses.price
    }

    return langResponses.default
  }

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsTyping(true)

    // Simulate typing delay
    setTimeout(async () => {
      const botResponse = await generateBotResponse(inputText)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botMessage])
      setIsTyping(false)
    }, 1000)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg z-50 transition-all duration-300 hover:scale-110"
      >
        <div className="flex items-center gap-2">
          <span className="text-2xl">ЁЯдЦ</span>
          <span className="hidden sm:block font-medium">Ask KisanSafe AI</span>
        </div>
      </button>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 w-96 h-[500px] bg-white rounded-lg shadow-2xl z-50 flex flex-col border border-gray-200">
      {/* Header */}
      <div className="bg-green-600 text-white p-4 rounded-t-lg flex justify-between items-center">
        <div className="flex items-center gap-2">
          <span className="text-xl">ЁЯдЦ</span>
          <div>
            <h3 className="font-semibold">KisanSafe AI</h3>
            <p className="text-xs opacity-90">Farming Assistant</p>
          </div>
        </div>
        <button
          onClick={() => setIsOpen(false)}
          className="text-white hover:bg-green-700 p-1 rounded"
        >
          тЬХ
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg whitespace-pre-line ${
                message.isBot
                  ? 'bg-gray-100 text-gray-800'
                  : 'bg-green-600 text-white'
              }`}
            >
              <p className="text-sm">{message.text}</p>
              <p className={`text-xs mt-1 ${message.isBot ? 'text-gray-500' : 'text-green-100'}`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </p>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-100 p-3 rounded-lg">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Actions */}
      {messages.length <= 1 && (
        <div className="p-4 border-t border-gray-200">
          <p className="text-xs text-gray-500 mb-2">{language === 'hi' ? 'рддреБрд░рдВрдд рдкреВрдЫреЗрдВ:' : 'Quick Ask:'}</p>
          <div className="grid grid-cols-2 gap-2 mb-3">
            <button
              onClick={() => setInputText(language === 'hi' ? 'рдзрд╛рди рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?' : 'How to grow rice?')}
              className="text-xs bg-green-50 hover:bg-green-100 text-green-700 p-2 rounded border"
            >
              ЁЯМ╛ {language === 'hi' ? 'рдзрд╛рди' : 'Rice'}
            </button>
            <button
              onClick={() => setInputText(language === 'hi' ? 'рдЖрдЬ рдХреЗ рднрд╛рд╡ рдмрддрд╛рдПрдВ' : 'Today market prices')}
              className="text-xs bg-blue-50 hover:bg-blue-100 text-blue-700 p-2 rounded border"
            >
              ЁЯТ░ {language === 'hi' ? 'рднрд╛рд╡' : 'Prices'}
            </button>
            <button
              onClick={() => setInputText(language === 'hi' ? 'рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА' : 'Weather updates')}
              className="text-xs bg-yellow-50 hover:bg-yellow-100 text-yellow-700 p-2 rounded border"
            >
              ЁЯМжя╕П {language === 'hi' ? 'рдореМрд╕рдо' : 'Weather'}
            </button>
            <button
              onClick={() => setInputText(language === 'hi' ? 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ' : 'Government schemes')}
              className="text-xs bg-purple-50 hover:bg-purple-100 text-purple-700 p-2 rounded border"
            >
              ЁЯПЫя╕П {language === 'hi' ? 'рдпреЛрдЬрдирд╛' : 'Schemes'}
            </button>
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex gap-2">
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={language === 'hi' ? 'рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ...' : 'Ask your farming question...'}
            className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputText.trim() || isTyping}
            className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white p-2 rounded-lg transition-colors"
          >
            <span className="text-sm">ЁЯУд</span>
          </button>
        </div>
      </div>
    </div>
  )
}