'use client'

import { useState, useRef, useEffect } from 'react'
import { useLanguage } from '@/contexts/LanguageContext'
import { AIAgentService } from '@/lib/aiAgentService'
import { VoiceService } from '@/lib/voiceService'

interface Message {
  id: string
  text: string
  isBot: boolean
  timestamp: Date
}

interface FarmContext {
  crop?: string
  location?: string
  farmSize?: string
  state?: string
  district?: string
}

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputText, setInputText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [isListening, setIsListening] = useState(false)
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [voiceSupported, setVoiceSupported] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { t, language } = useLanguage()

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    // Initialize voice service
    const initVoice = async () => {
      const supported = VoiceService.initialize()
      setVoiceSupported(supported)
      
      if (supported) {
        // Request microphone permission on first load
        await VoiceService.requestMicrophonePermission()
      }
    }
    
    initVoice()
  }, [])

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage = getWelcomeMessage()
      setMessages([{
        id: Date.now().toString(),
        text: welcomeMessage,
        isBot: true,
        timestamp: new Date()
      }])
    }
  }, [isOpen, language])

  const getWelcomeMessage = () => {
    const welcomeMessages = {
      en: "ЁЯМ╛ Hello! I'm KisanSafe AI Assistant. I can help you with:\n\nтАв Crop yield predictions\nтАв Weather alerts & farming tips\nтАв Market prices & best selling times\nтАв Disease identification & treatment\nтАв Government schemes & subsidies\nтАв Planting schedules & soil management\n\nWhat would you like to know?",
      hi: "ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдХрд┐рд╕рд╛рдирд╕реЗрдл AI рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nтАв рдлрд╕рд▓ рдЙрддреНрдкрд╛рджрди рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди\nтАв рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА рдФрд░ рдЦреЗрддреА рдХреЗ рдЯрд┐рдкреНрд╕\nтАв рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдмреЗрдЪрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп\nтАв рдмреАрдорд╛рд░реА рдкрд╣рдЪрд╛рди рдФрд░ рдЗрд▓рд╛рдЬ\nтАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рд╕рдмреНрд╕рд┐рдбреА\nтАв рдмреБрдЖрдИ рдХрд╛ рд╕рдордп рдФрд░ рдорд┐рдЯреНрдЯреА рдкреНрд░рдмрдВрдзрди\n\nрдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      te: "ЁЯМ╛ р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░Хр░┐р░╕р░╛р░ир▒НтАМр░╕р▒Зр░лр▒Н AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б:\n\nтАв р░кр░Вр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛р░▓р▒Б\nтАв р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б & р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б\nтАв р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б & р░Ер░ор▒Нр░ор░Хр░кр▒Б р░╕р░ор░пр░В\nтАв р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б & р░Ър░┐р░Хр░┐р░др▒Нр░╕\nтАв р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б & р░╕р░мр▒Нр░╕р░┐р░бр▒Ар░▓р▒Б\nтАв р░╡р░┐р░др▒Нр░др░и р░╕р░ор░пр░В & р░ир▒Зр░▓ р░ир░┐р░░р▒Нр░╡р░╣р░г\n\nр░ор▒Ар░░р▒Б р░Пр░ор░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
      ta: "ЁЯМ╛ ро╡рогроХрпНроХроорпН! роиро╛ройрпН роХро┐роЪро╛ройрпНроЪрпЗроГрокрпН AI роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:\n\nтАв рокропро┐ро░рпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпН роХрогро┐рокрпНрокрпБроХро│рпН\nтАв ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН & ро╡ро┐ро╡роЪро╛роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпН\nтАв роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН & ро╡ро┐ро▒рпНрокройрпИ роирпЗро░роорпН\nтАв роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН & роЪро┐роХро┐роЪрпНроЪрпИ\nтАв роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН & рооро╛ройро┐ропроЩрпНроХро│рпН\nтАв ро╡ро┐родрпИрокрпНрокрпБ роирпЗро░роорпН & роорогрпН роорпЗро▓ро╛рогрпНроорпИ\n\nроирпАроЩрпНроХро│рпН роОройрпНрой родрпЖро░ро┐роирпНродрпБ роХрпКро│рпНро│ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
      bn: "ЁЯМ╛ ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржХрж┐рж╕рж╛ржирж╕рзЗржл AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nтАв ржлрж╕рж▓ ржЙрзОржкрж╛ржжржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕\nтАв ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛ ржУ ржХрзГрж╖рж┐ ржЯрж┐ржкрж╕\nтАв ржмрж╛ржЬрж╛рж░ ржжрж╛ржо ржУ ржмрж┐ржХрзНрж░ржпрж╝рзЗрж░ рж╕ржоржпрж╝\nтАв рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржУ ржЪрж┐ржХрж┐рзОрж╕рж╛\nтАв рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк ржУ ржнрж░рзНрждрзБржХрж┐\nтАв ржмржкржирзЗрж░ рж╕ржоржпрж╝ ржУ ржорж╛ржЯрж┐ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛\n\nржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
      gu: "ЁЯМ╛ ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркХрк┐рк╕рк╛ркирк╕рлЗркл AI рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ ркдркорк╛рк░рлА ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ:\n\nтАв рккрк╛ркХ ркЙркдрлНрккрк╛ркжрки ркЕркирлБркорк╛рки\nтАв рк╣рк╡рк╛ркорк╛рки ркЪрлЗркдрк╡ркгрлА ркЕркирлЗ ркЦрлЗркдрлАркирлА ркЯрк┐рккрлНрк╕\nтАв ркмркЬрк╛рк░ ркнрк╛рк╡ ркЕркирлЗ рк╡рлЗркЪрк╛ркгркирлЛ рк╕ркоркп\nтАв рк░рлЛркЧ ркУрк│ркЦ ркЕркирлЗ рк╕рк╛рк░рк╡рк╛рк░\nтАв рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркЕркирлЗ рк╕ркмрк╕рк┐ркбрлА\nтАв рк╡рк╛рк╡рлЗркдрк░ркирлЛ рк╕ркоркп ркЕркирлЗ ркорк╛ркЯрлА рк╡рлНркпрк╡рк╕рлНркерк╛рккрки\n\nркдркорлЗ рк╢рлБркВ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
    }
    return welcomeMessages[language] || welcomeMessages.en
  }

  const generateBotResponse = async (userMessage: string): Promise<string> => {
    try {
      // Get farm data for context
      let farmContext: FarmContext = {}
      if (typeof window !== 'undefined') {
        const farmData = localStorage.getItem('farmData')
        if (farmData) {
          const parsed = JSON.parse(farmData)
          farmContext = {
            crop: parsed.crop,
            location: parsed.location,
            farmSize: parsed.farmSize,
            state: parsed.state,
            district: parsed.district
          }
        }
      }

      // Use the new AI Agent Service
      const response = await AIAgentService.generateResponse(userMessage, language, farmContext)
      return response
      
    } catch (error) {
      console.error('AI Agent Error:', error)
      return getEnhancedFallback(userMessage, language)
    }
  }

  const getEnhancedFallback = (userMessage: string, language: string): string => {
    const lowerInput = userMessage.toLowerCase()
    const isHindi = language === 'hi'
    
    // Fertilizer specific response
    if (lowerInput.includes('fertilizer') || lowerInput.includes('fertiliser') || lowerInput.includes('рдЦрд╛рдж')) {
      return isHindi
        ? "ЁЯМ▒ **рдЦрд╛рдж рдХрд╛ рд╕рд╣реА рдЙрдкрдпреЛрдЧ:**\n\n1я╕ПтГг **рдорд┐рдЯреНрдЯреА рдЬрд╛рдВрдЪ**: рдкрд╣рд▓реЗ pH рдФрд░ NPK рд▓реЗрд╡рд▓ рдЬрд╛рдВрдЪреЗрдВ\n2я╕ПтГг **NPK рдЕрдиреБрдкрд╛рдд**: 120:60:40 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░\n3я╕ПтГг **рд╕рдордп**: рдмреБрдЖрдИ рдХреЗ рд╕рдордп + 30-45 рджрд┐рди рдмрд╛рдж\n4я╕ПтГг **рдЬреИрд╡рд┐рдХ**: 5-10 рдЯрди рдЧреЛрдмрд░ рдЦрд╛рдж/рд╣реЗрдХреНрдЯреЗрдпрд░\n\n**рдЪреЗрддрд╛рд╡рдиреА**: рдЬреНрдпрд╛рджрд╛ рдЦрд╛рдж рдиреБрдХрд╕рд╛рдирджрд╛рдпрдХ!"
        : "ЁЯМ▒ **Smart Fertilizer Application:**\n\n1я╕ПтГг **Soil Test First**: Check pH and NPK levels\n2я╕ПтГг **NPK Ratio**: 120:60:40 kg per hectare\n3я╕ПтГг **Split Application**: Base dose + top dressing after 30-45 days\n4я╕ПтГг **Organic Matter**: Add 5-10 tons farmyard manure\n5я╕ПтГг **Micronutrients**: Zinc, Iron, Boron as needed\n\n**Warning**: Over-fertilization can damage crops and soil!"
    }
    
    // Default intelligent response
    return isHindi
      ? "ЁЯдЦ рдореИрдВ рдЖрдкрдХреЗ рдЦреЗрддреА рдХреЗ рд╕рд╡рд╛рд▓ рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реВрдВ! рдЖрдк рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:\n\nтАв рдлрд╕рд▓ рдХреА рджреЗрдЦрднрд╛рд▓ рдФрд░ рдкреИрджрд╛рд╡рд╛рд░\nтАв рдЦрд╛рдж-рдкрд╛рдиреА рдФрд░ рдорд┐рдЯреНрдЯреА\nтАв рдмреАрдорд╛рд░реА-рдХреАрдЯ рдХрд╛ рдЗрд▓рд╛рдЬ\nтАв рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдмрд┐рдХреНрд░реА\nтАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ\n\nрдХреГрдкрдпрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдкреВрдЫреЗрдВ!"
      : "ЁЯдЦ I'm ready to answer your farming questions! You can ask me about:\n\nтАв Crop care and yield improvement\nтАв Fertilizers, irrigation, and soil health\nтАв Disease and pest management\nтАв Market prices and selling strategies\nтАв Government schemes and subsidies\nтАв Weather alerts and farming calendar\n\nPlease ask me a specific question for detailed guidance!"
  }

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || inputText
    if (!textToSend.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: textToSend,
      isBot: false,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsTyping(true)

    try {
      const botResponse = await generateBotResponse(textToSend)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botMessage])
      
      // Auto-speak response if voice is supported and enabled
      if (voiceSupported && !VoiceService.isCurrentlySpeaking()) {
        setTimeout(() => {
          VoiceService.speak(
            botResponse,
            language,
            () => setIsSpeaking(true),
            () => setIsSpeaking(false),
            (error) => console.error('Speech error:', error)
          )
        }, 500)
      }
      
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: language === 'hi' 
          ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореБрдЭреЗ рдХреБрдЫ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред"
          : language === 'te'
          ? "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир░╛р░Хр▒Б р░Хр▒Кр░ир▒Нр░ир░┐ р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Х р░╕р░ор░╕р▒Нр░пр░▓р▒Б р░Йр░ир▒Нр░ир░╛р░пр░┐. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐."
          : "Sorry, I'm experiencing some technical issues. Please try again.",
        isBot: true,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const handleVoiceInput = async () => {
    if (!voiceSupported) {
      alert(language === 'hi' ? 'рдЖрд╡рд╛рдЬрд╝ рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ' : 'Voice feature not available')
      return
    }

    if (isListening) {
      VoiceService.stopListening()
      setIsListening(false)
      return
    }

    try {
      await VoiceService.startListening(
        language,
        (transcript) => {
          setInputText(transcript)
          setIsListening(false)
          // Auto-send the voice message
          setTimeout(() => handleSendMessage(transcript), 500)
        },
        (error) => {
          console.error('Voice error:', error)
          setIsListening(false)
          alert(error)
        },
        () => setIsListening(true),
        () => setIsListening(false)
      )
    } catch (error) {
      console.error('Voice input error:', error)
      setIsListening(false)
    }
  }

  const toggleSpeech = () => {
    if (isSpeaking) {
      VoiceService.stopSpeaking()
      setIsSpeaking(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg z-50 transition-all duration-300 hover:scale-110"
      >
        <div className="flex items-center gap-2">
          <span className="text-2xl">ЁЯдЦ</span>
          <span className="hidden sm:block font-medium">Ask KisanSafe AI</span>
        </div>
      </button>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 w-96 h-[500px] bg-white rounded-lg shadow-2xl z-50 flex flex-col border border-gray-200">
      {/* Header */}
      <div className="bg-green-600 text-white p-4 rounded-t-lg flex justify-between items-center">
        <div className="flex items-center gap-2">
          <span className="text-xl">ЁЯдЦ</span>
          <div>
            <h3 className="font-semibold">KisanSafe AI</h3>
            <p className="text-xs opacity-90">Farming Assistant</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {voiceSupported && (
            <div className="text-xs opacity-75">
              ЁЯОд Voice
            </div>
          )}
          <button
            onClick={() => {
              setIsOpen(false)
              VoiceService.stopListening()
              VoiceService.stopSpeaking()
              setIsListening(false)
              setIsSpeaking(false)
            }}
            className="text-white hover:bg-green-700 p-1 rounded"
          >
            тЬХ
          </button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg whitespace-pre-line ${
                message.isBot
                  ? 'bg-gray-100 text-gray-800'
                  : 'bg-green-600 text-white'
              }`}
            >
              <p className="text-sm">{message.text}</p>
              <p className={`text-xs mt-1 ${message.isBot ? 'text-gray-500' : 'text-green-100'}`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </p>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-100 p-3 rounded-lg">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Actions */}
      {messages.length <= 1 && (
        <div className="p-4 border-t border-gray-200">
          <p className="text-xs text-gray-500 mb-2">{language === 'hi' ? 'рддреБрд░рдВрдд рдкреВрдЫреЗрдВ:' : 'Quick Ask:'}</p>
          <div className="grid grid-cols-2 gap-2 mb-3">
            <button
              onClick={() => setInputText(
                language === 'hi' ? 'рдзрд╛рди рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?' : 
                language === 'te' ? 'р░╡р░░р░┐ р░╕р░╛р░Чр▒Б р░Ор░▓р░╛ р░Ър▒Зр░пр░╛р░▓р░┐?' : 
                'How to grow rice?'
              )}
              className="text-xs bg-green-50 hover:bg-green-100 text-green-700 p-2 rounded border"
            >
              ЁЯМ╛ {language === 'hi' ? 'рдзрд╛рди' : language === 'te' ? 'р░╡р░░р░┐' : 'Rice'}
            </button>
            <button
              onClick={() => setInputText(
                language === 'hi' ? 'рдЖрдЬ рдХреЗ рднрд╛рд╡ рдмрддрд╛рдПрдВ' : 
                language === 'te' ? 'р░ир▒Зр░Яр░┐ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б' : 
                'Today market prices'
              )}
              className="text-xs bg-blue-50 hover:bg-blue-100 text-blue-700 p-2 rounded border"
            >
              ЁЯТ░ {language === 'hi' ? 'рднрд╛рд╡' : language === 'te' ? 'р░зр░░р░▓р▒Б' : 'Prices'}
            </button>
            <button
              onClick={() => setInputText(
                language === 'hi' ? 'рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА' : 
                language === 'te' ? 'р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░ор░╛р░Ър░╛р░░р░В' : 
                'Weather updates'
              )}
              className="text-xs bg-yellow-50 hover:bg-yellow-100 text-yellow-700 p-2 rounded border"
            >
              ЁЯМжя╕П {language === 'hi' ? 'рдореМрд╕рдо' : language === 'te' ? 'р░╡р░╛р░др░╛р░╡р░░р░гр░В' : 'Weather'}
            </button>
            <button
              onClick={() => setInputText(
                language === 'hi' ? 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ' : 
                language === 'te' ? 'р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б' : 
                'Government schemes'
              )}
              className="text-xs bg-purple-50 hover:bg-purple-100 text-purple-700 p-2 rounded border"
            >
              ЁЯПЫя╕П {language === 'hi' ? 'рдпреЛрдЬрдирд╛' : language === 'te' ? 'р░кр░ер░Хр░╛р░▓р▒Б' : 'Schemes'}
            </button>
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex gap-2">
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={language === 'hi' ? 'рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ...' : language === 'te' ? 'р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...' : 'Ask your farming question...'}
            className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
          />
          
          {/* Voice Input Button */}
          {voiceSupported && (
            <button
              onClick={handleVoiceInput}
              disabled={isTyping}
              className={`p-2 rounded-lg transition-colors ${
                isListening 
                  ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse' 
                  : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
              title={isListening ? 'Stop listening' : 'Voice input'}
            >
              <span className="text-sm">{isListening ? 'ЁЯФ┤' : 'ЁЯОд'}</span>
            </button>
          )}
          
          {/* Speech Toggle Button */}
          {isSpeaking && (
            <button
              onClick={toggleSpeech}
              className="bg-orange-500 hover:bg-orange-600 text-white p-2 rounded-lg transition-colors"
              title="Stop speaking"
            >
              <span className="text-sm">ЁЯФЗ</span>
            </button>
          )}
          
          <button
            onClick={() => handleSendMessage()}
            disabled={!inputText.trim() || isTyping}
            className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white p-2 rounded-lg transition-colors"
          >
            <span className="text-sm">ЁЯУд</span>
          </button>
        </div>
        
        {/* Voice Status */}
        {isListening && (
          <div className="mt-2 text-center">
            <div className="inline-flex items-center gap-2 bg-red-50 text-red-700 px-3 py-1 rounded-full text-xs">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              {language === 'hi' ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...' : language === 'te' ? 'р░╡р░┐р░Вр░Яр▒Бр░ир▒Нр░ир░╛р░ир▒Б...' : 'Listening...'}
            </div>
          </div>
        )}
        
        {isSpeaking && (
          <div className="mt-2 text-center">
            <div className="inline-flex items-center gap-2 bg-orange-50 text-orange-700 px-3 py-1 rounded-full text-xs">
              <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"></div>
              {language === 'hi' ? 'рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдВ...' : language === 'te' ? 'р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...' : 'Speaking...'}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}